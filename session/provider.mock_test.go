// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=./provider.mock_test.go -package=session Provider
//
// Package session is a generated GoMock package.
package session

import (
	context "context"
	reflect "reflect"

	ekit "github.com/ecodeclub/ekit"
	gctx "github.com/ecodeclub/ginx/gctx"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Claims mocks base method.
func (m *MockSession) Claims() Claims {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claims")
	ret0, _ := ret[0].(Claims)
	return ret0
}

// Claims indicates an expected call of Claims.
func (mr *MockSessionMockRecorder) Claims() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claims", reflect.TypeOf((*MockSession)(nil).Claims))
}

// Del mocks base method.
func (m *MockSession) Del(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockSessionMockRecorder) Del(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockSession)(nil).Del), ctx, key)
}

// Destroy mocks base method.
func (m *MockSession) Destroy(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockSessionMockRecorder) Destroy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSession)(nil).Destroy), ctx)
}

// Get mocks base method.
func (m *MockSession) Get(ctx context.Context, key string) ekit.AnyValue {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(ekit.AnyValue)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSessionMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSession)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockSession) Set(ctx context.Context, key string, val any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockSessionMockRecorder) Set(ctx, key, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSession)(nil).Set), ctx, key, val)
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockProvider) Destroy(ctx *gctx.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockProviderMockRecorder) Destroy(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockProvider)(nil).Destroy), ctx)
}

// Get mocks base method.
func (m *MockProvider) Get(ctx *gctx.Context) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProviderMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProvider)(nil).Get), ctx)
}

// NewSession mocks base method.
func (m *MockProvider) NewSession(ctx *gctx.Context, uid int64, jwtData map[string]string, sessData map[string]any) (Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSession", ctx, uid, jwtData, sessData)
	ret0, _ := ret[0].(Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewSession indicates an expected call of NewSession.
func (mr *MockProviderMockRecorder) NewSession(ctx, uid, jwtData, sessData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSession", reflect.TypeOf((*MockProvider)(nil).NewSession), ctx, uid, jwtData, sessData)
}

// RenewAccessToken mocks base method.
func (m *MockProvider) RenewAccessToken(ctx *gctx.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewAccessToken", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenewAccessToken indicates an expected call of RenewAccessToken.
func (mr *MockProviderMockRecorder) RenewAccessToken(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewAccessToken", reflect.TypeOf((*MockProvider)(nil).RenewAccessToken), ctx)
}

// UpdateClaims mocks base method.
func (m *MockProvider) UpdateClaims(ctx *gctx.Context, claims Claims) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClaims", ctx, claims)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClaims indicates an expected call of UpdateClaims.
func (mr *MockProviderMockRecorder) UpdateClaims(ctx, claims any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClaims", reflect.TypeOf((*MockProvider)(nil).UpdateClaims), ctx, claims)
}

// MockTokenCarrier is a mock of TokenCarrier interface.
type MockTokenCarrier struct {
	ctrl     *gomock.Controller
	recorder *MockTokenCarrierMockRecorder
}

// MockTokenCarrierMockRecorder is the mock recorder for MockTokenCarrier.
type MockTokenCarrierMockRecorder struct {
	mock *MockTokenCarrier
}

// NewMockTokenCarrier creates a new mock instance.
func NewMockTokenCarrier(ctrl *gomock.Controller) *MockTokenCarrier {
	mock := &MockTokenCarrier{ctrl: ctrl}
	mock.recorder = &MockTokenCarrierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenCarrier) EXPECT() *MockTokenCarrierMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockTokenCarrier) Clear(ctx *gctx.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx)
}

// Clear indicates an expected call of Clear.
func (mr *MockTokenCarrierMockRecorder) Clear(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockTokenCarrier)(nil).Clear), ctx)
}

// Extract mocks base method.
func (m *MockTokenCarrier) Extract(ctx *gctx.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// Extract indicates an expected call of Extract.
func (mr *MockTokenCarrierMockRecorder) Extract(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockTokenCarrier)(nil).Extract), ctx)
}

// Inject mocks base method.
func (m *MockTokenCarrier) Inject(ctx *gctx.Context, value string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Inject", ctx, value)
}

// Inject indicates an expected call of Inject.
func (mr *MockTokenCarrierMockRecorder) Inject(ctx, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockTokenCarrier)(nil).Inject), ctx, value)
}
